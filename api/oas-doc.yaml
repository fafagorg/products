openapi: 3.0.0
info:
  version: 1.0.0
  title: Swagger Productstore
  description: >-
    A sample API that uses a productstore as an example to demonstrate features
    in the OpenAPI 3.0 specification
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: 'http://swagger.io'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://productstore.swagger.io/api/v1'
paths:
  /products:
    get:
      description: |
        Returns all products from the system that the user has access to
      operationId: findProducts
      parameters:
        - name: min_price
          in: query
          description: minimum price for products
          required: false
          style: form
          schema:
            type: integer
            format: int32
        - name: max_price
          in: query
          description: maximum price for products
          required: false
          schema:
            type: integer
            format: int32
        - name: keyWord
          in: query
          description: key word to search for
          required: false
          schema:
            type: string
        - name: productCategory
          in: query
          description: category of the products
          required: false
          schema:
            type: string
      responses:
        '200':
          description: product response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new product in the store.  Duplicates are not allowed
      operationId: addProduct
      requestBody:
        description: Product to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '200':
          description: product response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rates:
    get:
      description: |
        Returns the exchange rates
      operationId: getRates
      responses:
        '200':
          description: rates response
          content:
            application/json:
              schema:
                type: array
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/products/{id}':
    get:
      description: Returns a product based on a single ID
      operationId: find product by id
      parameters:
        - name: id
          in: path
          description: ID of product to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: product response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single product based on the ID supplied
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: ID of product to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: product deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: modifies a single product based on the ID supplied
      operationId: editProduct
      parameters:
        - name: id
          in: path
          description: ID of product to edit
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Edited product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editProduct'
      responses:
        '200':
          description: product edited
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/products/client/{id}':
    get:
      description: Returns all products of a client
      operationId: findproductsbyclient
      parameters:
        - name: id
          in: path
          description: ID of client to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: product response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a all products of the client
      operationId: deleteAllClientProducts
      parameters:
        - name: id
          in: path
          description: ID of client to delete products of
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: products deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Product:
      allOf:
        - $ref: '#/components/schemas/NewProduct'
        #- required:
        #    - id
        #  properties:
        #    id:
        #      type: integer
        #      format: int64*/
    NewProduct:
      required:
        - name
        - category
        - price
        - seller
      properties:
        name:
          type: string
        category:
          type: string
        price:
          type: integer
          format: int64
        seller:
          type: string
        id:
          type: integer
          format: int64
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
